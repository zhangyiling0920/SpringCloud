在provider 和 consumer端都可以
为service接口添加一个服务降级处理的实现类就可实现解耦

1、pom
<!--新增hystrix-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>

2、yml
如果consumer使用hystrix 和openfeign
#openfeign想要使用hystrix需要在yml中开启
feign:
  hystrix:
    enabled: true

3、主启动类
在主启动类上加 @EnableCircuitBreaker 或 @EnableHystrix

4、业务
在serviceImpl方法或controller方法上加 @HystrixCommand

服务降级：1、程序运行异常 2、超时 3、服务熔断触发服务降级 4、线程池/信号量打满
服务熔断：（circuit breaker）：微服务链路保护机制 保险丝达到最大访问 直接拒绝访问
        服务降级 --> 服务熔断 --> 检测该节点恢复响应正常后 恢复调用链路
服务限流：留到sentinel再讲

The precise way that the circuit opening and closing occurs is as follows:

1. Assuming the volume across a circuit meets a certain threshold (HystrixCommandProperties.circuitBreakerRequestVolumeThreshold())...
2. And assuming that the error percentage exceeds the threshold error percentage (HystrixCommandProperties.circuitBreakerErrorThresholdPercentage())...
3. (短路)Then the circuit-breaker transitions from CLOSED to OPEN.
4. While it is open, it short-circuits all requests made against that circuit-breaker.
5. After some amount of time (HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()),
the next single request is let through (this is the HALF-OPEN state).
If the request fails, the circuit-breaker returns to the OPEN state for the duration of the sleep window.
If the request succeeds, the circuit-breaker transitions to CLOSED and the logic in 1. takes over again.

class HystrixCommandProperties 记录了参数的默认值 //这个是springboot源码就讲过了

5、hystrix dashboard。web监控界面仪表盘
用consumer监控provider
consumer的主启动类上要加注解@EnableHystrixDashboard
在provider的主启动类添加
    @Bean
    public ServletRegistrationBean getServlet() {
        HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet() ;
        ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);
        registrationBean.setLoadOnStartup(1);
        registrationBean.addUrlMappings("/hystrix.stream");
        registrationBean.setName("HystrixMetricsStreamServlet");
        return  registrationBean;
    }
provider要引入监控依赖 actuator

检测地址：consumer地址/hystrix
在面板中填入 provider地址/hystrix.stream